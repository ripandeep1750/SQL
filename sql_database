# CREATE DATABASE -----------------------------------------------------------------------------------------
CREATE DATABASE testDB;

# DROP DATABASE -------------------------------------------------------------------------------------------
DROP DATABASE testDB;

# BACKUP DATABASE -----------------------------------------------------------------------------------------
BACKUP DATABASE testDB
TO DISK = 'D:\backups\testDB.bak';

# BACKUP WITH DIFFERENTIAL :- only backs up the parts of the database that have changed since the last full database backup.
BACKUP DATABASE testDB
TO DISK = 'D:\backups\testDB.bak'
WITH DIFFERENTIAL;

# CREATE TABLE ---------------------------------------------------------------------------------------------
CREATE TABLE Persons (
    PersonID int,
    LastName varchar(255),
    FirstName varchar(255),
    Address varchar(255),
    City varchar(255)
);

# Create tabe usinf another table 
CREATE TABLE TestTable AS
SELECT customername, contactname
FROM customers;

# DROP TABLE -------------------------------------------------------------------------------------------------
DROP TABLE Shippers;   # result in loss of complete information

# TRUNCATE TABLE :- delete the data inside a table, but not the table itself ---------------------------------
TRUNCATE TABLE table_name;

# ALTER TABLE :- to add, delete, or modify columns in an existing table -------------------------------------
# ALTER TABLE - ADD COLUMN
ALTER TABLE Customers
ADD Email varchar(255);

# ALTER TABLE - DROP COLUMN
ALTER TABLE Customers
DROP COLUMN Email;

# ALTER TABLE - RENAME COLUMN
ALTER TABLE table_name
RENAME COLUMN old_name to new_name;
# To run in sql server
EXEC sp_rename 'table_name.old_name',  'new_name', 'COLUMN';

# ALTER TABLE - ALTER/MODIFY DATATYPE
ALTER TABLE table_name
ALTER COLUMN column_name datatype;

ALTER TABLE Persons
ALTER COLUMN DateOfBirth year;

# CONSTRAINTS :- used to specify rules for data in a table --------------------------------------------------------------------
-> used to limit the type of data that can go into a table.
- Constraints can be column level or table level.
CREATE TABLE table_name (
    column1 datatype constraint,
    column2 datatype constraint,
    column3 datatype constraint,
    ....
);

The following constraints are commonly used in SQL:
(1) NOT NULL - Ensures that a column cannot have a NULL value
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255) NOT NULL,
    Age int
);

(2) UNIQUE - Ensures that all values in a column are different.
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    UNIQUE (ID)
);
# For multiple columns
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT UC_Person UNIQUE (ID,LastName)
);

(3) PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table.
-> A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields).
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)
);
-> there is only ONE PRIMARY KEY (PK_Person). However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName).

(4) FOREIGN KEY - Prevents actions that would destroy links between tables.
-> A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table.
-> The table with the foreign key is called the child table, and the table with the primary key is called the referenced or parent table.
CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
);

# Foreign key constraint on multiple columns
CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)
    REFERENCES Persons(PersonID)
);

(5) CHECK - Ensures that the values in a column satisfies a specific condition.
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age>=18)
);

# Check constraint on multiple columns 
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
);

(6) DEFAULT - Sets a default value for a column if no value is specified.
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
);

(7) CREATE INDEX - Used to create and retrieve data from the database very quickly.
-> used to create indexes in tables.
CREATE INDEX idx_lastname
ON Persons (LastName);

# Create index on a combination of columns
CREATE INDEX idx_pname
ON Persons (LastName, FirstName);

# AUTO INCREMENT ---------------------------------------------------------------------------------------------------------------
-> Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.
-> Often this is the primary key field that we would like to be created automatically every time a new record is inserted.
CREATE TABLE Persons (
    Personid int NOT NULL AUTO_INCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (Personid)
);

# DATES -----------------------------------------------------------------------------------------------------------------------
# Different formats :- 
DATE - format YYYY-MM-DD
DATETIME - format: YYYY-MM-DD HH:MI:SS
TIMESTAMP - format: YYYY-MM-DD HH:MI:SS
YEAR - format YYYY or YY
SELECT * FROM Orders WHERE OrderDate='2008-11-11'

# VIEWS ----------------------------------------------------------------------------------------------------------------------
-> a view is a virtual table based on the result-set of an SQL statement.
CREATE VIEW [Brazil Customers] AS
SELECT CustomerName, ContactName
FROM Customers
WHERE Country = 'Brazil';

SELECT * FROM [Brazil Customers];  # To query the above view

# To update a view
CREATE OR REPLACE VIEW [Brazil Customers] AS    # Adds a city column
SELECT CustomerName, ContactName, City
FROM Customers
WHERE Country = 'Brazil';   

# Dropping a view
DROP VIEW [Brazil Customers];

# INJECTION --------------------------------------------------------------------------------------------------------------------
-> It is a code injection technique that might destroy your database.
-> It is one of the most common web hacking techniques.
-> It is the placement of malicious code in SQL statements, via web page input.
-> SQL injection usually occurs when you ask a user for input, like their username/userid, and instead of a name/id, the user
gives you an SQL statement that you will unknowingly run on your database.

# Following example creates a SELECT statement by adding a variable (txtUserId) to a select string. The variable is 
fetched from user input (getRequestString)
txtUserId = getRequestString("UserId");
txtSQL = "SELECT * FROM Users WHERE UserId = " + txtUserId;

# INJECTION BASED ON 1=1 IS ALWAYS TRUE
The original purpose of the code above was to create an SQL statement to select a user, with a given user id.
If there is nothing to prevent a user from entering "wrong" input, the user can enter some "smart" input like 105 or 1=1.
The SQL above is valid and will return ALL rows from the "Users" table, since OR 1=1 is always TRUE.

# INJECTION BASED ON ""="" IS ALWAYS TRUE
uName = getRequestString("username");
uPass = getRequestString("userpassword");
sql = 'SELECT * FROM Users WHERE Name ="' + uName + '" AND Pass ="' + uPass + '"'

SELECT * FROM Users WHERE Name ="John Doe" AND Pass ="myPass"
SELECT * FROM Users WHERE Name ="" or ""="" AND Pass ="" or ""="" # Will give access to everything, since statement is valid

# INJECTION BASED ON BATCHED SQL STATEMENTS
-> A batch of SQL statements is a group of two or more SQL statements, separated by semicolons.
SELECT * FROM Users; DROP TABLE Suppliers

txtUserId = getRequestString("UserId");
txtSQL = "SELECT * FROM Users WHERE UserId = " + txtUserId;

SELECT * FROM Users WHERE UserId = 105; DROP TABLE Suppliers;

# USE SQL PARAMETERS FOR PROTECTION
-> SQL parameters are values that are added to an SQL query at execution time, in a controlled manner.

ASP.NET RAZOR EXAMPLE :-
txtUserId = getRequestString("UserId");
txtSQL = "SELECT * FROM Users WHERE UserId = @0";    # parameters are represented in the SQL statement by a @ marker.
db.Execute(txtSQL,txtUserId);
-> The SQL engine checks each parameter to ensure that it is correct for its column and are treated literally, and not as part of
the SQL to be executed.

# HOSTING ---------------------------------------------------------------------------------------------------------------------
-> SQL Hosting: Refers to the use of servers to host and manage SQL databases, enabling access over the internet or a network.
-> Cloud Hosting: Providers like AWS, Azure, and Google Cloud offer managed SQL hosting with automatic backups, scaling, and 
security.
-> On-Premises Hosting: SQL databases are hosted on local servers managed by in-house IT teams.
-> Types of Databases: Supports relational databases (SQL Server, MySQL, PostgreSQL) and cloud-based solutions (Azure SQL, 
Amazon RDS).
-> Advantages: Scalability, high availability, disaster recovery, and automatic updates in cloud hosting.
-> Access: Databases can be accessed remotely via SQL tools (SSMS, pgAdmin) or through APIs and applications.

# DATA TYPES -------------------------------------------------------------------------------------------------------------------
(1) Numeric Data Types:
-> INT: Whole numbers (e.g., 5, 100).
-> FLOAT / REAL: Approximate floating-point numbers (e.g., 5.67).
-> DECIMAL / NUMERIC: Fixed-point numbers for precise values (e.g., 10.25).
(2) Character Data Types:
-> CHAR(n): Fixed-length string (e.g., CHAR(10) allocates space for 10 characters).
-> VARCHAR(n): Variable-length string (e.g., VARCHAR(50) allocates up to 50 characters).
(3) Date and Time Data Types:
-> DATE: Stores date values (e.g., 2023-09-12).
-> TIME: Stores time values (e.g., 12:30:00).
-> DATETIME / TIMESTAMP: Stores both date and time values (e.g., 2024-01-01 12:00:00).
(4) Binary Data Types:
-> BINARY / VARBINARY: Stores binary data like images, audio, or video (e.g., VARBINARY(500)).
(5) Other Data Types:
-> BOOLEAN: Stores TRUE or FALSE.
-> TEXT: Stores large strings or unstructured data.
-> BLOB: Binary Large Object, used to store large binary data like files.
